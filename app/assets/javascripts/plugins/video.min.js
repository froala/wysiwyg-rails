/*!
 * froala_editor v3.1.0 (https://www.froala.com/wysiwyg-editor)
 * License https://froala.com/wysiwyg-editor/terms/
 * Copyright 2014-2020 Froala Labs
 */

!function (e, t) { "object" == typeof exports && "undefined" != typeof module ? t(require("froala-editor")) : "function" == typeof define && define.amd ? define(["froala-editor"], t) : t(e.FroalaEditor) }(this, function (ye) { "use strict"; ye = ye && ye.hasOwnProperty("default") ? ye["default"] : ye, Object.assign(ye.POPUP_TEMPLATES, { "video.insert": "[_BUTTONS_][_BY_URL_LAYER_][_EMBED_LAYER_][_UPLOAD_LAYER_][_PROGRESS_BAR_]", "video.edit": "[_BUTTONS_]", "video.size": "[_BUTTONS_][_SIZE_LAYER_]" }), Object.assign(ye.DEFAULTS, { videoAllowedTypes: ["mp4", "webm", "ogg", "mp3", "mpeg", "url"], videoAllowedProviders: [".*"], videoDefaultAlign: "center", videoDefaultDisplay: "block", videoDefaultWidth: 600, videoEditButtons: ["videoReplace", "videoRemove", "videoDisplay", "videoAlign", "videoSize", "autoplay"], videoInsertButtons: ["videoBack", "|", "videoByURL", "videoEmbed", "videoUpload"], videoMaxSize: 52428800, videoMove: !0, videoResize: !0, videoResponsive: !1, videoSizeButtons: ["videoBack", "|"], videoSplitHTML: !1, videoTextNear: !0, videoUpload: !0, videoUploadMethod: "POST", videoUploadParam: "file", videoUploadParams: {}, videoUploadToS3: !1, videoUploadURL: null }), ye.VIDEO_PROVIDERS = [{ test_regex: /^.*((youtu.be)|(youtube.com))\/((v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))?\??v?=?([^#\&\?]*).*/, url_regex: /(?:https?:\/\/)?(?:www\.)?(?:m\.)?(?:youtube\.com|youtu\.be)\/(?:watch\?v=|embed\/)?([0-9a-zA-Z_\-]+)(.+)?/g, url_text: "https://www.youtube.com/embed/$1?$2", html: '<iframe width="640" height="360" src="{url}&wmode=opaque" frameborder="0" allowfullscreen></iframe>', provider: "youtube" }, { test_regex: /^.*(?:vimeo.com)\/(?:channels(\/\w+\/)?|groups\/*\/videos\/\u200b\d+\/|video\/|)(\d+)(?:$|\/|\?)/, url_regex: /(?:https?:\/\/)?(?:www\.|player\.)?vimeo.com\/(?:channels\/(?:\w+\/)?|groups\/(?:[^\/]*)\/videos\/|album\/(?:\d+)\/video\/|video\/|)(\d+)(?:[a-zA-Z0-9_\-]+)?(\/[a-zA-Z0-9_\-]+)?/i, url_text: "https://player.vimeo.com/video/$1", html: '<iframe width="640" height="360" src="{url}" frameborder="0" allowfullscreen></iframe>', provider: "vimeo" }, { test_regex: /^.+(dailymotion.com|dai.ly)\/(video|hub)?\/?([^_]+)[^#]*(#video=([^_&]+))?/, url_regex: /(?:https?:\/\/)?(?:www\.)?(?:dailymotion\.com|dai\.ly)\/(?:video|hub)?\/?(.+)/g, url_text: "https://www.dailymotion.com/embed/video/$1", html: '<iframe width="640" height="360" src="{url}" frameborder="0" allowfullscreen></iframe>', provider: "dailymotion" }, { test_regex: /^.+(screen.yahoo.com)\/[^_&]+/, url_regex: "", url_text: "", html: '<iframe width="640" height="360" src="{url}?format=embed" frameborder="0" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" allowtransparency="true"></iframe>', provider: "yahoo" }, { test_regex: /^.+(rutube.ru)\/[^_&]+/, url_regex: /(?:https?:\/\/)?(?:www\.)?(?:rutube\.ru)\/(?:video)?\/?(.+)/g, url_text: "https://rutube.ru/play/embed/$1", html: '<iframe width="640" height="360" src="{url}" frameborder="0" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" allowtransparency="true"></iframe>', provider: "rutube" }, { test_regex: /^(?:.+)vidyard.com\/(?:watch)?\/?([^.&/]+)\/?(?:[^_.&]+)?/, url_regex: /^(?:.+)vidyard.com\/(?:watch)?\/?([^.&/]+)\/?(?:[^_.&]+)?/g, url_text: "https://play.vidyard.com/$1", html: '<iframe width="640" height="360" src="{url}" frameborder="0" allowfullscreen></iframe>', provider: "vidyard" }], ye.VIDEO_EMBED_REGEX = /^\W*((<iframe(.|\n)*>(\s|\n)*<\/iframe>)|(<embed(.|\n)*>))\W*$/i, ye.PLUGINS.video = function (p) { var s, f, v, c, i, o, u = p.$, d = "https://i.froala.com/upload", g = 2, h = 3, m = 4, l = 5, b = 6, r = {}; function y() { var e = p.popups.get("video.insert"); e.find(".fr-video-by-url-layer input").val("").trigger("change"); var t = e.find(".fr-video-embed-layer textarea"); t.val("").trigger("change"), (t = e.find(".fr-video-upload-layer input")).val("").trigger("change") } function a() { var e = p.popups.get("video.edit"); if (e || (e = function n() { var e = ""; if (0 < p.opts.videoEditButtons.length) { p.opts.videoResponsive && (-1 < p.opts.videoEditButtons.indexOf("videoSize") && p.opts.videoEditButtons.splice(p.opts.videoEditButtons.indexOf("videoSize"), 1), -1 < p.opts.videoEditButtons.indexOf("videoDisplay") && p.opts.videoEditButtons.splice(p.opts.videoEditButtons.indexOf("videoDisplay"), 1), -1 < p.opts.videoEditButtons.indexOf("videoAlign") && p.opts.videoEditButtons.splice(p.opts.videoEditButtons.indexOf("videoAlign"), 1)); var t = { buttons: e += '<div class="fr-buttons"> \n      '.concat(p.button.buildList(p.opts.videoEditButtons), " \n      </div>") }, o = p.popups.create("video.edit", t); return p.events.$on(p.$wp, "scroll.video-edit", function () { c && p.popups.isVisible("video.edit") && (p.events.disableBlur(), R(c)) }), o } return !1 }()), e) { p.popups.setContainer("video.edit", p.$sc), p.popups.refresh("video.edit"); var t = c.find("iframe, embed, ".concat(c.find("iframe, embed, audio").get(0) ? "audio" : "video")), o = t.offset().left + t.outerWidth() / 2, i = t.offset().top + t.outerHeight(), r = t.get(0).src ? t.get(0).src : null, a = !(!(r = (r = r.split("."))[r.length - 1]).includes("pdf") && !r.includes("txt")); t.hasClass("fr-file") || a || c.find("audio").get(0) ? (document.getElementById("autoplay-".concat(p.id)) && (document.getElementById("autoplay-".concat(p.id)).style.display = "none"), document.getElementById("videoReplace-".concat(p.id)) && (document.getElementById("videoReplace-".concat(p.id)).style.display = "none")) : (document.getElementById("autoplay-".concat(p.id)).style.display = "", document.getElementById("videoReplace-".concat(p.id)).style.display = ""), p.popups.show("video.edit", o, i, t.outerHeight(), !0) } } function n(e) { if (e) return p.popups.onRefresh("video.insert", y), p.popups.onHide("video.insert", q), !0; var t = ""; p.opts.videoUpload || -1 === p.opts.videoInsertButtons.indexOf("videoUpload") || p.opts.videoInsertButtons.splice(p.opts.videoInsertButtons.indexOf("videoUpload"), 1); var o = p.button.buildList(p.opts.videoInsertButtons); "" !== o && (t = '<div class="fr-buttons">' + o + "</div>"); var i, r = "", a = p.opts.videoInsertButtons.indexOf("videoUpload"), n = p.opts.videoInsertButtons.indexOf("videoByURL"), s = p.opts.videoInsertButtons.indexOf("videoEmbed"); if (0 <= n) { i = " fr-active", (a < n && 0 <= a || s < n && 0 <= s) && (i = ""); r = '<div class="fr-video-by-url-layer fr-layer'.concat(i, '" id="fr-video-by-url-layer-').concat(p.id, '"><div class="fr-input-line"><input id="fr-video-by-url-layer-text-').concat(p.id, '" type="text" placeholder="').concat(p.language.translate("Paste in a video URL"), '" tabIndex="1" aria-required="true"></div><div class="fr-action-buttons"><span style=\'float:left\'><div class="fr-checkbox-line fr-autoplay-margin"><span class="fr-checkbox"> <input id=\'videoPluginAutoplay\' data-checked="_blank" type="checkbox"> <span>').concat('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="10" height="10" viewBox="0 0 32 32"><path d="M27 4l-15 15-7-7-5 5 12 12 20-20z" fill="#FFF"></path></svg>', '</span></span> <label id="fr-label-target-').concat(p.id, '">Autoplay</label></div> </span><button type="button" class="fr-command fr-submit" data-cmd="videoInsertByURL" tabIndex="2" role="button">').concat(p.language.translate("Insert"), "</button></div></div>") } var d = ""; 0 <= s && (i = " fr-active", (a < s && 0 <= a || n < s && 0 <= n) && (i = ""), d = '<div class="fr-video-embed-layer fr-layer'.concat(i, '" id="fr-video-embed-layer-').concat(p.id, '"><div class="fr-input-line"><textarea id="fr-video-embed-layer-text').concat(p.id, '" type="text" placeholder="').concat(p.language.translate("Embedded Code"), '" tabIndex="1" aria-required="true" rows="5"></textarea></div><div class="fr-action-buttons"><button type="button" class="fr-command fr-submit" data-cmd="videoInsertEmbed" tabIndex="2" role="button">').concat(p.language.translate("Insert"), "</button></div></div>")); var l = ""; 0 <= a && (i = " fr-active", (s < a && 0 <= s || n < a && 0 <= n) && (i = ""), l = '<div class="fr-video-upload-layer fr-layer'.concat(i, '" id="fr-video-upload-layer-').concat(p.id, '"><strong>').concat(p.language.translate("Drop video"), "</strong><br>(").concat(p.language.translate("or click"), ')<div class="fr-form"><input type="file" accept="video/').concat(p.opts.videoAllowedTypes.join(", video/").toLowerCase(), '" tabIndex="-1" aria-labelledby="fr-video-upload-layer-').concat(p.id, '" role="button"></div></div>')); var f = { buttons: t, by_url_layer: r, embed_layer: d, upload_layer: l, progress_bar: '<div class="fr-video-progress-bar-layer fr-layer"><h3 tabIndex="-1" class="fr-message">Uploading</h3><div class="fr-loader"><span class="fr-progress"></span></div><div class="fr-action-buttons"><button type="button" class="fr-command fr-dismiss" data-cmd="videoDismissError" tabIndex="2" role="button">OK</button></div></div>' }, v = p.popups.create("video.insert", f); return function c(i) { p.events.$on(i, "dragover dragenter", ".fr-video-upload-layer", function () { return u(this).addClass("fr-drop"), !1 }, !0), p.events.$on(i, "dragleave dragend", ".fr-video-upload-layer", function () { return u(this).removeClass("fr-drop"), !1 }, !0), p.events.$on(i, "drop", ".fr-video-upload-layer", function (e) { e.preventDefault(), e.stopPropagation(), u(this).removeClass("fr-drop"); var t = e.originalEvent.dataTransfer; if (t && t.files) { var o = i.data("instance") || p; o.events.disableBlur(), o.video.upload(t.files), o.events.enableBlur() } }, !0), p.helpers.isIOS() && p.events.$on(i, "touchstart", '.fr-video-upload-layer input[type="file"]', function () { u(this).trigger("click") }, !0); p.events.$on(i, "change", '.fr-video-upload-layer input[type="file"]', function () { if (this.files) { var e = i.data("instance") || p; e.events.disableBlur(), i.find("input:focus").blur(), e.events.enableBlur(), e.video.upload(this.files) } u(this).val("") }, !0) }(v), v } function w(e) { p.events.focus(!0), p.selection.restore(); var t = !1; c && (W(), t = !0), p.html.insert('<span contenteditable="false" draggable="true" class="fr-jiv fr-video fr-deletable">'.concat(e, "</span>"), !1, p.opts.videoSplitHTML), p.popups.hide("video.insert"); var o = p.$el.find(".fr-jiv"); o.removeClass("fr-jiv"), o.toggleClass("fr-rv", p.opts.videoResponsive), Z(o, p.opts.videoDefaultDisplay, p.opts.videoDefaultAlign), o.toggleClass("fr-draggable", p.opts.videoMove), p.events.trigger(t ? "video.replaced" : "video.inserted", [o]) } function E() { var e = u(this); p.popups.hide("video.insert"), e.removeClass("fr-uploading"), e.parent().next().is("br") && e.parent().next().remove(), R(e.parent()), p.events.trigger("video.loaded", [e.parent()]) } function C(s, e, l, f, v) { p.edit.off(), x("Loading video"), e && (s = p.helpers.sanitizeURL(s)); var c = function c() { var e, t; if (f) { p.undo.canDo() || f.find("video").hasClass("fr-uploading") || p.undo.saveStep(); var o = f.find("video").data("fr-old-src"), i = f.data("fr-replaced"); f.data("fr-replaced", !1), p.$wp ? ((e = f.clone(!0)).find("video").removeData("fr-old-src").removeClass("fr-uploading"), e.find("video").off("canplay"), o && f.find("video").attr("src", o), f.replaceWith(e)) : e = f; for (var r = e.find("video").get(0).attributes, a = 0; a < r.length; a++) { var n = r[a]; 0 === n.nodeName.indexOf("data-") && e.find("video").removeAttr(n.nodeName) } if (void 0 !== l) for (t in l) l.hasOwnProperty(t) && "link" != t && e.find("video").attr("data-".concat(t), l[t]); e.find("video").on("canplay", E), e.find("video").attr("src", s), p.edit.on(), T(), p.undo.saveStep(), p.$el.blur(), p.events.trigger(i ? "video.replaced" : "video.inserted", [e, v]) } else e = function d(e, t, o) { var i, r = ""; if (t && void 0 !== t) for (i in t) t.hasOwnProperty(i) && "link" != i && (r += " data-".concat(i, '="').concat(t[i], '"')); var a = p.opts.videoDefaultWidth; a && "auto" != a && (a = "".concat(a, "px")); var n = u(document.createElement("span")).attr("contenteditable", "false").attr("draggable", "true").attr("class", "fr-video fr-dv" + p.opts.videoDefaultDisplay[0] + ("center" != p.opts.videoDefaultAlign ? " fr-fv" + p.opts.videoDefaultAlign[0] : "")).html('<video src="' + e + '" ' + r + (a ? ' style="width: ' + a + ';" ' : "") + " controls>" + p.language.translate("Your browser does not support HTML5 video.") + "</video>"); n.toggleClass("fr-draggable", p.opts.videoMove), p.edit.on(), p.events.focus(!0), p.selection.restore(), p.undo.saveStep(), p.opts.videoSplitHTML ? p.markers.split() : p.markers.insert(); p.html.wrap(); var s = p.$el.find(".fr-marker"); p.node.isLastSibling(s) && s.parent().hasClass("fr-deletable") && s.insertAfter(s.parent()); s.replaceWith(n), p.selection.clear(), n.find("video").get(0).readyState > n.find("video").get(0).HAVE_FUTURE_DATA || p.helpers.isIOS() ? o.call(n.find("video").get(0)) : n.find("video").on("canplaythrough load", o); return n }(s, l, E), T(), p.undo.saveStep(), p.events.trigger("video.inserted", [e, v]) }; _("Loading video"), c() } function _(e) { var t = p.popups.get("video.insert"); if (t || (t = n()), t.find(".fr-layer.fr-active").removeClass("fr-active").addClass("fr-pactive"), t.find(".fr-video-progress-bar-layer").addClass("fr-active"), t.find(".fr-buttons").hide(), c) { var o = c.find("iframe, embed, ".concat(c.find("iframe, embed, audio").get(0) ? "audio" : "video")); p.popups.setContainer("video.insert", p.$sc); var i = o.offset().left, r = o.offset().top + o.height(); p.popups.show("video.insert", i, r, o.outerHeight()) } void 0 === e && x(p.language.translate("Uploading"), 0) } function A(e) { var t = p.popups.get("video.insert"); if (t && (t.find(".fr-layer.fr-pactive").addClass("fr-active").removeClass("fr-pactive"), t.find(".fr-video-progress-bar-layer").removeClass("fr-active"), t.find(".fr-buttons").show(), e || p.$el.find("video.fr-error").length)) { if (p.events.focus(), p.$el.find("video.fr-error").length && (p.$el.find("video.fr-error").parent().remove(), p.undo.saveStep(), p.undo.run(), p.undo.dropRedo()), !p.$wp && c) { var o = c; M(!0), p.selection.setAfter(o.find("video").get(0)), p.selection.restore() } p.popups.hide("video.insert") } } function x(e, t) { var o = p.popups.get("video.insert"); if (o) { var i = o.find(".fr-video-progress-bar-layer"); i.find("h3").text(e + (t ? " ".concat(t, "%") : "")), i.removeClass("fr-error"), t ? (i.find("div").removeClass("fr-indeterminate"), i.find("div > span").css("width", "".concat(t, "%"))) : i.find("div").addClass("fr-indeterminate") } } function S(e) { _(); var t = p.popups.get("video.insert").find(".fr-video-progress-bar-layer"); t.addClass("fr-error"); var o = t.find("h3"); o.text(e), p.events.disableBlur(), o.focus() } function R(e) { t.call(e.get(0)) } function D(e) { x("Loading video"); var t = this.status, o = this.response, i = this.responseXML, r = this.responseText; try { if (p.opts.videoUploadToS3) if (201 == t) { var a = function s(e) { try { var t = u(e).find("Location").text(), o = u(e).find("Key").text(); return !1 === p.events.trigger("video.uploadedToS3", [t, o, e], !0) ? (p.edit.on(), !1) : t } catch (i) { return F(m, e), !1 } }(i); a && C(a, !1, [], e, o || i) } else F(m, o || i); else if (200 <= t && t < 300) { var n = function d(e) { try { if (!1 === p.events.trigger("video.uploaded", [e], !0)) return p.edit.on(), !1; var t = JSON.parse(e); return t.link ? t : (F(g, e), !1) } catch (o) { return F(m, e), !1 } }(r); n && C(n.link, !1, n, e, o || r) } else F(h, o || r) } catch (l) { F(m, o || r) } } function B() { F(m, this.response || this.responseText || this.responseXML) } function I(e) { if (e.lengthComputable) { var t = e.loaded / e.total * 100 | 0; x(p.language.translate("Uploading"), t) } } function U() { p.edit.on(), A(!0) } function k(e) { if (!p.core.sameInstance(v)) return !0; e.preventDefault(), e.stopPropagation(); var t = e.pageX || (e.originalEvent.touches ? e.originalEvent.touches[0].pageX : null), o = e.pageY || (e.originalEvent.touches ? e.originalEvent.touches[0].pageY : null); if (!t || !o) return !1; if ("mousedown" == e.type) { var i = p.$oel.get(0).ownerDocument, r = i.defaultView || i.parentWindow, a = !1; try { a = r.location != r.parent.location && !(r.$ && r.$.FE) } catch (n) { } a && r.frameElement && (t += p.helpers.getPX(u(r.frameElement).offset().left) + r.frameElement.clientLeft, o = e.clientY + p.helpers.getPX(u(r.frameElement).offset().top) + r.frameElement.clientTop) } p.undo.canDo() || p.undo.saveStep(), (f = u(this)).data("start-x", t), f.data("start-y", o), s.show(), p.popups.hideAll(), Y() } function $(e) { if (!p.core.sameInstance(v)) return !0; if (f) { e.preventDefault(); var t = e.pageX || (e.originalEvent.touches ? e.originalEvent.touches[0].pageX : null), o = e.pageY || (e.originalEvent.touches ? e.originalEvent.touches[0].pageY : null); if (!t || !o) return !1; var i = f.data("start-x"), r = f.data("start-y"); f.data("start-x", t), f.data("start-y", o); var a = t - i, n = o - r, s = c.find("iframe, embed, ".concat(c.find("iframe, embed, audio").get(0) ? "audio" : "video")), d = s.width(), l = s.height(); (f.hasClass("fr-hnw") || f.hasClass("fr-hsw")) && (a = 0 - a), (f.hasClass("fr-hnw") || f.hasClass("fr-hne")) && (n = 0 - n), s.css("width", d + a), s.css("height", l + n), s.removeAttr("width"), s.removeAttr("height"), z() } } function O(e) { if (!p.core.sameInstance(v)) return !0; f && c && (e && e.stopPropagation(), f = null, s.hide(), z(), a(), p.undo.saveStep()) } function L(e) { return '<div class="fr-handler fr-h'.concat(e, '"></div>') } function P(e, t, o, i) { return e.pageX = t, e.pageY = t, k.call(this, e), e.pageX = e.pageX + o * Math.floor(Math.pow(1.1, i)), e.pageY = e.pageY + o * Math.floor(Math.pow(1.1, i)), $.call(this, e), O.call(this, e), ++i } function T() { var e, t = Array.prototype.slice.call(p.el.querySelectorAll("video, .fr-video > *")), o = []; for (e = 0; e < t.length; e++)o.push(t[e].getAttribute("src")), u(t[e]).toggleClass("fr-draggable", p.opts.videoMove), "" === t[e].getAttribute("class") && t[e].removeAttribute("class"), "" === t[e].getAttribute("style") && t[e].removeAttribute("style"); if (i) for (e = 0; e < i.length; e++)o.indexOf(i[e].getAttribute("src")) < 0 && p.events.trigger("video.removed", [u(i[e])]); i = t } function z() { v || function n() { var e; if (p.shared.$video_resizer ? (v = p.shared.$video_resizer, s = p.shared.$vid_overlay, p.events.on("destroy", function () { u("body").first().append(v.removeClass("fr-active")) }, !0)) : (p.shared.$video_resizer = u(document.createElement("div")).attr("class", "fr-video-resizer"), v = p.shared.$video_resizer, p.events.$on(v, "mousedown", function (e) { e.stopPropagation() }, !0), p.opts.videoResize && (v.append(L("nw") + L("ne") + L("sw") + L("se")), p.shared.$vid_overlay = u(document.createElement("div")).attr("class", "fr-video-overlay"), s = p.shared.$vid_overlay, e = v.get(0).ownerDocument, u(e).find("body").first().append(s))), p.events.on("shared.destroy", function () { v.html("").removeData().remove(), v = null, p.opts.videoResize && (s.remove(), s = null) }, !0), p.helpers.isMobile() || p.events.$on(u(p.o_win), "resize.video", function () { M(!0) }), p.opts.videoResize) { e = v.get(0).ownerDocument, p.events.$on(v, p._mousedown, ".fr-handler", k), p.events.$on(u(e), p._mousemove, $), p.events.$on(u(e.defaultView || e.parentWindow), p._mouseup, O), p.events.$on(s, "mouseleave", O); var i = 1, r = null, a = 0; p.events.on("keydown", function (e) { if (c) { var t = -1 != navigator.userAgent.indexOf("Mac OS X") ? e.metaKey : e.ctrlKey, o = e.which; (o !== r || 200 < e.timeStamp - a) && (i = 1), (o == ye.KEYCODE.EQUALS || p.browser.mozilla && o == ye.KEYCODE.FF_EQUALS) && t && !e.altKey ? i = P.call(this, e, 1, 1, i) : (o == ye.KEYCODE.HYPHEN || p.browser.mozilla && o == ye.KEYCODE.FF_HYPHEN) && t && !e.altKey && (i = P.call(this, e, 2, -1, i)), r = o, a = e.timeStamp } }), p.events.on("keyup", function () { i = 1 }) } }(), (p.$wp || p.$sc).append(v), v.data("instance", p); var e = c.find("iframe, embed, ".concat(c.find("iframe, embed, audio").get(0) ? "audio" : "video")), t = 0, o = 0; p.opts.iframe && (o = p.helpers.getPX(p.$wp.find(".fr-iframe").css("padding-top")), t = p.helpers.getPX(p.$wp.find(".fr-iframe").css("padding-left"))), v.css("top", (p.opts.iframe ? e.offset().top + o - 1 : e.offset().top - p.$wp.offset().top - 1) + p.$wp.scrollTop()).css("left", (p.opts.iframe ? e.offset().left + t - 1 : e.offset().left - p.$wp.offset().left - 1) + p.$wp.scrollLeft()).css("width", e.get(0).getBoundingClientRect().width).css("height", e.get(0).getBoundingClientRect().height).addClass("fr-active") } function t(e) { if (e && "touchend" == e.type && o) return !0; if (e && p.edit.isDisabled()) return e.stopPropagation(), e.preventDefault(), !1; if (p.edit.isDisabled()) return !1; for (var t = 0; t < ye.INSTANCES.length; t++)ye.INSTANCES[t] != p && ye.INSTANCES[t].events.trigger("video.hideResizer"); p.toolbar.disable(), p.helpers.isMobile() && (p.events.disableBlur(), p.$el.blur(), p.events.enableBlur()), p.$el.find(".fr-video.fr-active").removeClass("fr-active"), (c = u(this)).addClass("fr-active"), p.opts.iframe && p.size.syncIframe(), ee(), z(), a(), p.selection.clear(), p.button.bulkRefresh(), p.events.trigger("image.hideResizer") } function M(e) { c && (function t() { return p.shared.vid_exit_flag }() || !0 === e) && (v.removeClass("fr-active"), p.toolbar.enable(), c.removeClass("fr-active"), c = null, Y()) } function V() { p.shared.vid_exit_flag = !0 } function Y() { p.shared.vid_exit_flag = !1 } function N(e) { var t = e.originalEvent.dataTransfer; if (t && t.files && t.files.length) { var o = t.files[0]; if (o && o.type && -1 !== o.type.indexOf("video")) { if (!p.opts.videoUpload) return e.preventDefault(), e.stopPropagation(), !1; p.markers.remove(), p.markers.insertAtPoint(e.originalEvent), p.$el.find(".fr-marker").replaceWith(ye.MARKERS), p.popups.hideAll(); var i = p.popups.get("video.insert"); return i || (i = n()), p.popups.setContainer("video.insert", p.$sc), p.popups.show("video.insert", e.originalEvent.pageX, e.originalEvent.pageY), _(), 0 <= p.opts.videoAllowedTypes.indexOf(o.type.replace(/video\//g, "")) ? K(t.files) : F(b), e.preventDefault(), e.stopPropagation(), !1 } } } function K(e) { if (void 0 !== e && 0 < e.length) { if (!1 === p.events.trigger("video.beforeUpload", [e])) return !1; var t, o = e[0]; if ((null === p.opts.videoUploadURL || p.opts.videoUploadURL == d) && !p.opts.videoUploadToS3) return function s(i) { c && c.find("iframe") && c.find("iframe").length && W(); var r = new FileReader; r.onload = function () { r.result; for (var e = atob(r.result.split(",")[1]), t = [], o = 0; o < e.length; o++)t.push(e.charCodeAt(o)); C(window.URL.createObjectURL(new Blob([new Uint8Array(t)], { type: i.type })), !1, null, c) }, _(), r.readAsDataURL(i) }(o), !1; if (o.size > p.opts.videoMaxSize) return F(l), !1; if (p.opts.videoAllowedTypes.indexOf(o.type.replace(/video\//g, "")) < 0) return F(b), !1; if (p.drag_support.formdata && (t = p.drag_support.formdata ? new FormData : null), t) { var i; if (!1 !== p.opts.videoUploadToS3) for (i in t.append("key", p.opts.videoUploadToS3.keyStart + (new Date).getTime() + "-" + (o.name || "untitled")), t.append("success_action_status", "201"), t.append("X-Requested-With", "xhr"), t.append("Content-Type", o.type), p.opts.videoUploadToS3.params) p.opts.videoUploadToS3.params.hasOwnProperty(i) && t.append(i, p.opts.videoUploadToS3.params[i]); for (i in p.opts.videoUploadParams) p.opts.videoUploadParams.hasOwnProperty(i) && t.append(i, p.opts.videoUploadParams[i]); t.append(p.opts.videoUploadParam, o); var r = p.opts.videoUploadURL; p.opts.videoUploadToS3 && (r = p.opts.videoUploadToS3.uploadURL ? p.opts.videoUploadToS3.uploadURL : "https://".concat(p.opts.videoUploadToS3.region, ".amazonaws.com/").concat(p.opts.videoUploadToS3.bucket)); var a = p.core.getXHR(r, p.opts.videoUploadMethod); a.onload = function () { D.call(a, c) }, a.onerror = B, a.upload.onprogress = I, a.onabort = U, _(), p.events.disableBlur(), p.edit.off(), p.events.enableBlur(); var n = p.popups.get("video.insert"); n && u(n.off("abortUpload")).on("abortUpload", function () { 4 != a.readyState && a.abort() }), a.send(t) } } } function F(e, t) { p.edit.on(), c && c.find("video").addClass("fr-error"), S(p.language.translate("Something went wrong. Please try again.")), p.events.trigger("video.error", [{ code: e, message: r[e] }, t]) } function H() { if (c) { var e = p.popups.get("video.size"), t = c.find("iframe, embed, ".concat(c.find("iframe, embed, audio").get(0) ? "audio" : "video")); e.find('input[name="width"]').val(t.get(0).style.width || t.attr("width")).trigger("change"), e.find('input[name="height"]').val(t.get(0).style.height || t.attr("height")).trigger("change") } } function X(e) { if (e) return p.popups.onRefresh("video.size", H), !0; var t = { buttons: '<div class="fr-buttons fr-tabs">'.concat(p.button.buildList(p.opts.videoSizeButtons), "</div>"), size_layer: '<div class="fr-video-size-layer fr-layer fr-active" id="fr-video-size-layer-'.concat(p.id, '"><div class="fr-video-group"><div class="fr-input-line"><input id="fr-video-size-layer-width-').concat(p.id, '" type="text" name="width" placeholder="').concat(p.language.translate("Width"), '" tabIndex="1"></div><div class="fr-input-line"><input id="fr-video-size-layer-height-').concat(p.id, '" type="text" name="height" placeholder="').concat(p.language.translate("Height"), '" tabIndex="1"></div></div><div class="fr-action-buttons"><button type="button" class="fr-command fr-submit" data-cmd="videoSetSize" tabIndex="2" role="button">').concat(p.language.translate("Update"), "</button></div></div>") }, o = p.popups.create("video.size", t); return p.events.$on(p.$wp, "scroll", function () { c && p.popups.isVisible("video.size") && (p.events.disableBlur(), R(c)) }), o } function G(e) { if (void 0 === e && (e = c), e) { if (e.hasClass("fr-fvl")) return "left"; if (e.hasClass("fr-fvr")) return "right"; if (e.hasClass("fr-dvb") || e.hasClass("fr-dvi")) return "center"; if ("block" == e.css("display")) { if ("left" == e.css("text-algin")) return "left"; if ("right" == e.css("text-align")) return "right" } else { if ("left" == e.css("float")) return "left"; if ("right" == e.css("float")) return "right" } } return "center" } function j(e) { void 0 === e && (e = c); var t = e.css("float"); return e.css("float", "none"), "block" == e.css("display") ? (e.css("float", ""), e.css("float") != t && e.css("float", t), "block") : (e.css("float", ""), e.css("float") != t && e.css("float", t), "inline") } function W() { if (c && !1 !== p.events.trigger("video.beforeRemove", [c])) { var e = c; p.popups.hideAll(), M(!0), p.selection.setBefore(e.get(0)) || p.selection.setAfter(e.get(0)), e.remove(), p.selection.restore(), p.html.fillEmptyBlocks() } } function q() { A() } function Z(e, t, o) { !p.opts.htmlUntouched && p.opts.useClasses ? (e.removeClass("fr-fvl fr-fvr fr-dvb fr-dvi"), e.addClass("fr-fv".concat(o[0], " fr-dv").concat(t[0]))) : "inline" == t ? (e.css({ display: "inline-block" }), "center" == o ? e.css({ "float": "none" }) : "left" == o ? e.css({ "float": "left" }) : e.css({ "float": "right" })) : (e.css({ display: "block", clear: "both" }), "left" == o ? e.css({ textAlign: "left" }) : "right" == o ? e.css({ textAlign: "right" }) : e.css({ textAlign: "center" })) } function J() { var e = p.$el.find("video").filter(function () { return 0 === u(this).parents("span.fr-video").length }); if (0 != e.length) { e.wrap(u(document.createElement("span")).attr("class", "fr-video fr-deletable").attr("contenteditable", "false")), p.$el.find("embed, iframe").filter(function () { if (p.browser.safari && this.getAttribute("src") && this.setAttribute("src", this.src), 0 < u(this).parents("span.fr-video").length) return !1; for (var e = u(this).attr("src"), t = 0; t < ye.VIDEO_PROVIDERS.length; t++) { var o = ye.VIDEO_PROVIDERS[t]; if (o.test_regex.test(e) && new RegExp(p.opts.videoAllowedProviders.join("|")).test(o.provider)) return !0 } return !1 }).map(function () { return 0 === u(this).parents("object").length ? this : u(this).parents("object").get(0) }).wrap(u(document.createElement("span")).attr("class", "fr-video").attr("contenteditable", "false")); for (var t, o, i, r, a = p.$el.find("span.fr-video, video"), n = 0; n < a.length; n++) { var s = u(a[n]); !p.opts.htmlUntouched && p.opts.useClasses ? ((r = s).hasClass("fr-dvi") || r.hasClass("fr-dvb") || (r.addClass("fr-fv".concat(G(r)[0])), r.addClass("fr-dv".concat(j(r)[0]))), p.opts.videoTextNear || s.removeClass("fr-dvi").addClass("fr-dvb")) : p.opts.htmlUntouched || p.opts.useClasses || (void 0, o = (t = s).hasClass("fr-dvb") ? "block" : t.hasClass("fr-dvi") ? "inline" : null, i = t.hasClass("fr-fvl") ? "left" : t.hasClass("fr-fvr") ? "right" : G(t), Z(t, o, i), t.removeClass("fr-dvb fr-dvi fr-fvr fr-fvl")) } a.toggleClass("fr-draggable", p.opts.videoMove) } } function Q(e) { document.getElementById("autoplay-1").style.cssText = "background:".concat(e) } function ee() { if (c) { p.selection.clear(); var e = p.doc.createRange(); e.selectNode(c.get(0)), p.selection.get().addRange(e) } } return r[1] = "Video cannot be loaded from the passed link.", r[g] = "No link in upload response.", r[h] = "Error during file upload.", r[m] = "Parsing response failed.", r[l] = "File is too large.", r[b] = "Video file type is invalid.", r[7] = "Files can be uploaded only to same domain in IE 8 and IE 9.", p.shared.vid_exit_flag = !1, { _init: function te() { p.opts.videoResponsive && (p.opts.videoResize = !1), function e() { p.events.on("drop", N, !0), p.events.on("mousedown window.mousedown", V), p.events.on("window.touchmove", Y), p.events.on("mouseup window.mouseup", M), p.events.on("commands.mousedown", function (e) { 0 < e.parents(".fr-toolbar").length && M() }), p.events.on("video.hideResizer commands.undo commands.redo element.dropped", function () { M(!0) }) }(), p.helpers.isMobile() && (p.events.$on(p.$el, "touchstart", "span.fr-video", function () { o = !1 }), p.events.$on(p.$el, "touchmove", function () { o = !0 })), p.events.on("html.set", J), J(), p.events.$on(p.$el, "mousedown", "span.fr-video", function (e) { e.stopPropagation(), (p.browser.msie || p.browser.edge) && (e.target.innerText || (e.target.dragDrop(), t.call(this, e))) }), p.events.$on(p.$el, "click touchend", "span.fr-video", function (e) { if (e.target.innerText.length || "false" == u(this).parents("[contenteditable]").not(".fr-element").not(".fr-img-caption").not("body").first().attr("contenteditable")) return !0; t.call(this, e) }), p.events.on("keydown", function (e) { var t = e.which; return !c || t != ye.KEYCODE.BACKSPACE && t != ye.KEYCODE.DELETE ? c && t == ye.KEYCODE.ESC ? (M(!0), e.preventDefault(), !1) : c && t != ye.KEYCODE.F10 && !p.keys.isBrowserAction(e) ? (e.preventDefault(), !1) : void 0 : (e.preventDefault(), W(), p.undo.saveStep(), !1) }, !0), p.events.on("toolbar.esc", function () { if (c) return p.events.disableBlur(), p.events.focus(), !1 }, !0), p.events.on("toolbar.focusEditor", function () { if (c) return !1 }, !0), p.events.on("keydown", function () { p.$el.find("span.fr-video:empty").remove() }), p.$wp && (T(), p.events.on("contentChanged", T)), n(!0), X(!0) }, showInsertPopup: function oe() { var e = p.$tb.find('.fr-command[data-cmd="insertVideo"]'), t = p.popups.get("video.insert"); if (t || (t = n()), A(), !t.hasClass("fr-active")) if (p.popups.refresh("video.insert"), p.popups.setContainer("video.insert", p.$tb), e.isVisible()) { var o = p.button.getPosition(e), i = o.left, r = o.top; p.popups.show("video.insert", i, r, e.outerHeight()) } else p.position.forSelection(t), p.popups.show("video.insert") }, showLayer: function ie(e) { var t, o, i = p.popups.get("video.insert"); if (!c && !p.opts.toolbarInline) { var r = p.$tb.find('.fr-command[data-cmd="insertVideo"]'); t = r.offset().left, o = r.offset().top + (p.opts.toolbarBottom ? 10 : r.outerHeight() - 10) } p.opts.toolbarInline && (o = i.offset().top - p.helpers.getPX(i.css("margin-top")), i.hasClass("fr-above") && (o += i.outerHeight())), i.find(".fr-layer").removeClass("fr-active"), i.find(".fr-".concat(e, "-layer")).addClass("fr-active"), p.popups.show("video.insert", t, o, 0), p.accessibility.focusPopup(i) }, refreshByURLButton: function re(e) { var t = p.popups.get("video.insert"); t && t.find(".fr-video-by-url-layer").hasClass("fr-active") && e.addClass("fr-active").attr("aria-pressed", !0) }, refreshEmbedButton: function ae(e) { var t = p.popups.get("video.insert"); t && t.find(".fr-video-embed-layer").hasClass("fr-active") && e.addClass("fr-active").attr("aria-pressed", !0) }, refreshUploadButton: function ne(e) { var t = p.popups.get("video.insert"); t && t.find(".fr-video-upload-layer").hasClass("fr-active") && e.addClass("fr-active").attr("aria-pressed", !0) }, upload: K, insertByURL: function se(e) { var t = !!document.getElementById("videoPluginAutoplay") && document.getElementById("videoPluginAutoplay").checked; void 0 === e && (e = (p.popups.get("video.insert").find('.fr-video-by-url-layer input[type="text"]').val() || "").trim()); var o = null; if (/^http/.test(e) || (e = "https://".concat(e)), p.helpers.isURL(e)) for (var i = 0; i < ye.VIDEO_PROVIDERS.length; i++) { var r = ye.VIDEO_PROVIDERS[i], a = "autoplay=1"; if (r.html.includes("autoplay=1") && document.getElementById("videoPluginAutoplay").checked) r.html = r.html, document.getElementById("videoPluginAutoplay").checked = !1; else if (t) { var n = r.html.indexOf("{url}") + 5; r.html = [r.html.slice(0, n), a, r.html.slice(n)].join(""), t = !1, document.getElementById("videoPluginAutoplay").checked = !1 } else (r = ye.VIDEO_PROVIDERS[i]).html = r.html.replace(a, ""); if (r.test_regex.test(e) && new RegExp(p.opts.videoAllowedProviders.join("|")).test(r.provider)) { o = e.replace(r.url_regex, r.url_text), o = r.html.replace(/\{url\}/, o); break } } o ? w(o) : (S(p.language.translate("Something went wrong. Please try again.")), p.events.trigger("video.linkError", [e])) }, insertEmbed: function de(e) { void 0 === e && (e = p.popups.get("video.insert").find(".fr-video-embed-layer textarea").val() || ""), 0 !== e.length && ye.VIDEO_EMBED_REGEX.test(e) ? w(e) : (S(p.language.translate("Something went wrong. Please try again.")), p.events.trigger("video.codeError", [e])) }, insert: w, align: function le(e) { c.removeClass("fr-fvr fr-fvl"), !p.opts.htmlUntouched && p.opts.useClasses ? "left" == e ? c.addClass("fr-fvl") : "right" == e && c.addClass("fr-fvr") : Z(c, j(), e), ee(), z(), a(), p.selection.clear() }, refreshAlign: function fe(e) { if (!c) return !1; e.find(">*").first().replaceWith(p.icon.create("video-align-".concat(G()))) }, refreshAlignOnShow: function ve(e, t) { c && t.find('.fr-command[data-param1="'.concat(G(), '"]')).addClass("fr-active").attr("aria-selected", !0) }, display: function ce(e) { c.removeClass("fr-dvi fr-dvb"), !p.opts.htmlUntouched && p.opts.useClasses ? "inline" == e ? c.addClass("fr-dvi") : "block" == e && c.addClass("fr-dvb") : Z(c, e, G()), ee(), z(), a(), p.selection.clear() }, refreshDisplayOnShow: function pe(e, t) { c && t.find('.fr-command[data-param1="'.concat(j(), '"]')).addClass("fr-active").attr("aria-selected", !0) }, remove: W, hideProgressBar: A, showSizePopup: function ue() { var e = p.popups.get("video.size"); e || (e = X()), A(), p.popups.refresh("video.size"), p.popups.setContainer("video.size", p.$sc); var t = c.find("iframe, embed, ".concat(c.find("iframe, embed, audio").get(0) ? "audio" : "video")), o = t.offset().left + t.outerWidth() / 2, i = t.offset().top + t.height(); p.popups.show("video.size", o, i, t.height(), !0) }, replace: function ge() { var e = p.popups.get("video.insert"); e || (e = n()), p.popups.isVisible("video.insert") || (A(), p.popups.refresh("video.insert"), p.popups.setContainer("video.insert", p.$sc)); var t = c.offset().left + c.outerWidth() / 2, o = c.offset().top + c.height(); p.popups.show("video.insert", t, o, c.outerHeight(), !0) }, back: function e() { c ? (p.events.disableBlur(), c[0].click()) : (p.events.disableBlur(), p.selection.restore(), p.events.enableBlur(), p.popups.hide("video.insert"), p.toolbar.showInline()) }, setSize: function he(e, t) { if (c) { var o = p.popups.get("video.size"), i = c.find("iframe, embed, ".concat(c.find("iframe, embed, audio").get(0) ? "audio" : "video")); i.css("width", e || o.find('input[name="width"]').val()), i.css("height", t || o.find('input[name="height"]').val()), i.get(0).style.width && i.removeAttr("width"), i.get(0).style.height && i.removeAttr("height"), o.find("input:focus").blur(), setTimeout(function () { c.trigger("click") }, p.helpers.isAndroid() ? 50 : 0) } }, get: function me() { return c }, showProgressBar: _, _editVideo: R, setAutoplay: function be() { var e; if (c.find("iframe, embed, audio").get(0)) (e = c.find("iframe, embed, audio")).get(0).src.includes("autoplay=1") ? (Q("#FFFFFF"), e.get(0).src = e.get(0).src.replace("autoplay=1", "")) : (Q("#D6D6D6"), e.get(0).src = e.get(0).src + "&autoplay=1"); else if ((e = c.find("iframe, embed, video")).get(0).outerHTML.includes("autoplay")) Q("#FFFFFF"), e.get(0).outerHTML = e.get(0).outerHTML.replace("autoplay", ""); else { Q("#D6D6D6"); var t = e.get(0).outerHTML.indexOf("class") - 1; e.get(0).outerHTML = [e.get(0).outerHTML.slice(0, t), "autoplay", e.get(0).outerHTML.slice(t)].join("") } } } }, ye.RegisterCommand("insertVideo", { title: "Insert Video", undo: !1, focus: !0, refreshAfterCallback: !1, popup: !0, callback: function () { this.popups.isVisible("video.insert") ? (this.$el.find(".fr-marker").length && (this.events.disableBlur(), this.selection.restore()), this.popups.hide("video.insert")) : this.video.showInsertPopup() }, plugin: "video" }), ye.DefineIcon("insertVideo", { NAME: "video-camera", FA5NAME: "camera", SVG_KEY: "insertVideo" }), ye.DefineIcon("videoByURL", { NAME: "link", SVG_KEY: "insertLink" }), ye.RegisterCommand("videoByURL", { title: "By URL", undo: !1, focus: !1, toggle: !0, callback: function () { this.video.showLayer("video-by-url") }, refresh: function (e) { this.video.refreshByURLButton(e) } }), ye.DefineIcon("videoEmbed", { NAME: "code", SVG_KEY: "codeView" }), ye.RegisterCommand("videoEmbed", { title: "Embedded Code", undo: !1, focus: !1, toggle: !0, callback: function () { this.video.showLayer("video-embed") }, refresh: function (e) { this.video.refreshEmbedButton(e) } }), ye.DefineIcon("videoUpload", { NAME: "upload", SVG_KEY: "upload" }), ye.RegisterCommand("videoUpload", { title: "Upload Video", undo: !1, focus: !1, toggle: !0, callback: function () { this.video.showLayer("video-upload") }, refresh: function (e) { this.video.refreshUploadButton(e) } }), ye.RegisterCommand("videoInsertByURL", { undo: !0, focus: !0, callback: function () { this.video.insertByURL() } }), ye.RegisterCommand("videoInsertEmbed", { undo: !0, focus: !0, callback: function () { this.video.insertEmbed() } }), ye.DefineIcon("videoDisplay", { NAME: "star", SVG_KEY: "star" }), ye.RegisterCommand("videoDisplay", { title: "Display", type: "dropdown", options: { inline: "Inline", block: "Break Text" }, callback: function (e, t) { this.video.display(t) }, refresh: function (e) { this.opts.videoTextNear || e.addClass("fr-hidden") }, refreshOnShow: function (e, t) { this.video.refreshDisplayOnShow(e, t) } }), ye.DefineIcon("video-align", { NAME: "align-left", SVG_KEY: "align Left" }), ye.DefineIcon("video-align-left", { NAME: "align-left", SVG_KEY: "alignLeft" }), ye.DefineIcon("video-align-right", { NAME: "align-right", SVG_KEY: "alignRight" }), ye.DefineIcon("video-align-center", { NAME: "align-justify", SVG_KEY: "alignJustify" }), ye.DefineIcon("videoAlign", { NAME: "align-center", SVG_KEY: "alignCenter" }), ye.RegisterCommand("videoAlign", { type: "dropdown", title: "Align", options: { left: "Align Left", center: "None", right: "Align Right" }, html: function () { var e = '<ul class="fr-dropdown-list" role="presentation">', t = ye.COMMANDS.videoAlign.options; for (var o in t) t.hasOwnProperty(o) && (e += '<li role="presentation"><a class="fr-command fr-title" tabIndex="-1" role="option" data-cmd="videoAlign" data-param1="'.concat(o, '" title="').concat(this.language.translate(t[o]), '">').concat(this.icon.create("video-align-".concat(o)), '<span class="fr-sr-only">').concat(this.language.translate(t[o]), "</span></a></li>")); return e += "</ul>" }, callback: function (e, t) { this.video.align(t) }, refresh: function (e) { this.video.refreshAlign(e) }, refreshOnShow: function (e, t) { this.video.refreshAlignOnShow(e, t) } }), ye.DefineIcon("videoReplace", { NAME: "exchange", FA5NAME: "exchange-alt", SVG_KEY: "replaceImage" }), ye.RegisterCommand("videoReplace", { title: "Replace", undo: !1, focus: !1, popup: !0, refreshAfterCallback: !1, callback: function () { this.video.replace() } }), ye.DefineIcon("videoRemove", { NAME: "trash", SVG_KEY: "remove" }), ye.RegisterCommand("videoRemove", { title: "Remove", callback: function () { this.video.remove() } }), ye.DefineIcon("autoplay", { NAME: "autoplay", SVG_KEY: "autoplay" }), ye.RegisterCommand("autoplay", { undo: !1, focus: !1, popup: !0, title: "Autoplay", callback: function () { this.video.setAutoplay() } }), ye.DefineIcon("videoSize", { NAME: "arrows-alt", SVG_KEY: "imageSize" }), ye.RegisterCommand("videoSize", { undo: !1, focus: !1, popup: !0, title: "Change Size", callback: function () { this.video.showSizePopup() } }), ye.DefineIcon("videoBack", { NAME: "arrow-left", SVG_KEY: "back" }), ye.RegisterCommand("videoBack", { title: "Back", undo: !1, focus: !1, back: !0, callback: function () { this.video.back() }, refresh: function (e) { this.video.get() || this.opts.toolbarInline ? (e.removeClass("fr-hidden"), e.next(".fr-separator").removeClass("fr-hidden")) : (e.addClass("fr-hidden"), e.next(".fr-separator").addClass("fr-hidden")) } }), ye.RegisterCommand("videoDismissError", { title: "OK", undo: !1, callback: function () { this.video.hideProgressBar(!0) } }), ye.RegisterCommand("videoSetSize", { undo: !0, focus: !1, title: "Update", refreshAfterCallback: !1, callback: function () { this.video.setSize() } }) });